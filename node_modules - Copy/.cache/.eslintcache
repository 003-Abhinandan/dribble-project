[{"C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\index.js":"1","C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\App.js":"2","C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\reportWebVitals.js":"3","C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\pages\\Login.jsx":"4"},{"size":535,"mtime":1712411977021,"results":"5","hashOfConfig":"6"},{"size":169,"mtime":1712652131115,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1712411977045,"results":"8","hashOfConfig":"6"},{"size":3898,"mtime":1712418013851,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5ys0q5",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\index.js",[],[],"C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\App.js",[],[],"C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\reportWebVitals.js",[],[],"C:\\Users\\abhin\\Desktop\\dribble_project\\dribble-project\\src\\pages\\Login.jsx",["23","24"],[],"import React, { useState } from \"react\";\r\nimport LOGO from \"../assets/Login.jpeg\";\r\nimport { Button, Checkbox, Form, Input } from \"antd\";\r\n\r\nexport const Login = () => {\r\n  const [form] = Form.useForm();\r\n  const [buttonDisabled, setButtonDisabled] = useState(true);\r\n\r\n  const onFinish = (values) => {\r\n    console.log(\"Success:\", values);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  const handleCheckboxChange = (e) => {\r\n    setButtonDisabled(!e.target.checked);\r\n  };\r\n  return (\r\n    <div className=\"flex h-screen\">\r\n      <div className=\"w-[40%] \">\r\n        <img src={LOGO} alt=\"Login image not loading\" />\r\n      </div>\r\n      <div className=\"w-[60%]\">\r\n        <div className=\"flex justify-end p-2 mr-2 gap-2 \">\r\n          Already a member? <a>Sign in</a>\r\n        </div>\r\n        <div className=\"flex flex-col justify-center items-center mt-[40px]  gap-4\">\r\n          <div className=\"flex flex-col justify-start w-[500px] gap-3\">\r\n            <div className=\"text-2xl  font-semibold\">Sign up to Dribble</div>\r\n            {/* <div className=\"text-xs text-red\">Username has already been taken</div> */}\r\n          </div>\r\n          <div className=\"w-[450px] mt-4\">\r\n            <Form\r\n              form={form}\r\n              name=\"createAccountForm\"\r\n              onFinish={onFinish}\r\n              onFinishFailed={onFinishFailed}\r\n            >\r\n              <div className=\"flex gap-2\">\r\n                <Form.Item\r\n                  label=\"Name\"\r\n                  name=\"name\"\r\n                  labelCol={{ span: 24 }}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"Please enter your name!\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label=\"Username\"\r\n                  name=\"username\"\r\n                  labelCol={{ span: 24 }}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"Please enter your username!\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n              </div>\r\n\r\n              <Form.Item\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                labelCol={{ span: 24 }}\r\n                rules={[\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"Please enter a valid email address!\",\r\n                  },\r\n                  {\r\n                    required: true,\r\n                    message: \"Please enter your email!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                labelCol={{ span: 24 }}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please enter your password!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password />\r\n              </Form.Item>\r\n\r\n              <Form.Item name=\"remember\" valuePropName=\"checked\">\r\n                <Checkbox onChange={handleCheckboxChange}>\r\n                  I agree to the terms and conditions\r\n                </Checkbox>\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  disabled={buttonDisabled}\r\n                  className=\"w-[200px]\"\r\n                >\r\n                  Create Account\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",{"ruleId":"25","severity":1,"message":"26","line":23,"column":9,"nodeType":"27","endLine":23,"endColumn":57},{"ruleId":"28","severity":1,"message":"29","line":27,"column":29,"nodeType":"27","endLine":27,"endColumn":32},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md"]